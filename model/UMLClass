@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Bicycle {
  + Bicycle(BicycleType, GPSPosition): 
  # isFree: boolean
  # id: Integer
  # position: GPSPosition
  # inStation: boolean
  - type: BicycleType
  + setInStation(Boolean, DockingStation): void
  + toString(): String
  + IsFromStreet(): boolean
   position: GPSPosition
   inStation: boolean
   nextUniqueId: Integer
   isFree: boolean
   isFromStreet: boolean
   id: Integer
   type: BicycleType
}
class BicycleTest {
  + BicycleTest(): 
  + testInStationBicycle(): void
  + testUniqueID(): void
  + testPositionBicycle(): void
  + testStationBicycle(): void
  + testStateBicycle(): void
  + testTypeBicycle(): void
}
enum BicycleType << enumeration >> {
  + BicycleType(): 
  + values(): BicycleType[]
  + valueOf(String): BicycleType
}
class CardsTest {
  + CardsTest(): 
  + testCards(): void
}
class DataStore {
  + DataStore(HashMap<Integer, User>, HashMap<Integer, DockingStation>, HashMap<String, VelibNetwork>): 
  + DataStore(): 
  - stations: HashMap<Integer, DockingStation>
  - users: HashMap<Integer, User>
  - velibNetworks: HashMap<String, VelibNetwork>
  - bikeOutOfStation: HashMap<Integer, Bicycle>
  + toString(): String
  + isBikeGPSExist(GPSPosition): boolean
  + addVelibNetwork(VelibNetwork): void
  + computeUserStatistics(User): String
  + userStatistics(User): void
  + getBikeGPS(GPSPosition, String): Bicycle
  + addStation(DockingStation): void
  + addUser(User): void
  + stationBalance(DockingStation): void
  + VelibNetworksNamePossible(String): boolean
   users: HashMap<Integer, User>
   velibNetworks: HashMap<String, VelibNetwork>
   stations: HashMap<Integer, DockingStation>
   bikeOutOfStation: Bicycle
}
class DataStoreTest {
  + DataStoreTest(): 
  + testEmptyDataStore(): void
  + testBikeGPSExists(): void
  + testAddUser(): void
  + testVelibNetworksNameIsPossible(): void
  + testAddStation(): void
  + testAddVelibNetwork(): void
}
class DockingStation {
  + DockingStation(GPSPosition, DockingStationStatus, DockingStationType, String, int): 
  # position: GPSPosition
  # nbOfSlots: int
  # id: Integer
  # stationType: DockingStationType
  # SlotHashMap: HashMap<Integer, ParkingSlot>
  # stationStatus: DockingStationStatus
  # numberOfRent: int
  # numberOfReturn: int
  # initialNumberOfBikes: int
  - generateUniqueId(String): int
  + getNumberOfBike(BicycleType): Integer
  + addNumberOfReturn(): void
  + addBicycle(Bicycle): void
  + addNumberOfRent(): void
  + displayHashMap(HashMap<Integer, ParkingSlot>): String
  + getBicycle(BicycleType): Bicycle
  + hasAnyBike(): Boolean
  + addParkingSlot(ParkingSlot): void
  + removeBike(Bicycle): void
  + hasBike(BicycleType): Boolean
  + getParkingSlotWithBike(BicycleType): ParkingSlot
  + toString(): String
  + HasFreeParkingSlot(): Boolean
   numberOfRent: int
   numberOfParkingSlots: int
   freeParkingSlot: ParkingSlot
   stationType: DockingStationType
   initialNumberOfBikes: int
   anyBicycle: Bicycle
   nbOfSlots: int
   id: Integer
   stationStatus: DockingStationStatus
   numberOfFreeParkingSlot: Integer
   allParking: HashMap<Integer, ParkingSlot>
   numberOfReturn: int
   position: GPSPosition
   parkingSlotWitAnyBike: ParkingSlot
   SlotHashMap: HashMap<Integer, ParkingSlot>
}
enum DockingStationStatus << enumeration >> {
  + DockingStationStatus(): 
  + valueOf(String): DockingStationStatus
  + values(): DockingStationStatus[]
}
class DockingStationTest {
  + DockingStationTest(): 
  + testTypeDockingStation(): void
  + testAddBicycleDockingStation(): void
  + testPositionDockingStation(): void
  + testRemoveBicycleDockingStation(): void
  + testStatusDockingStation(): void
  + testNumberBicycleDockingStation(): void
}
enum DockingStationType << enumeration >> {
  + DockingStationType(): 
  + valueOf(String): DockingStationType
  + values(): DockingStationType[]
}
class GPSPosition {
  + GPSPosition(Double, Double): 
  # longitude: Double
  # latitude: Double
  + toString(): String
  + getDistance(GPSPosition): Double
   latitude: Double
   longitude: Double
}
class GPSPositionTest {
  + GPSPositionTest(): 
  + testGettingDistance(): void
  + testPosition(): void
}
class MyVelibCLUI {
  + MyVelibCLUI(): 
  + start(): void
  - handleDisplayCommand(String[]): void
  - handleAllBikesCommand(String[]): void
  - executeCommand(String): void
  - handleSortStationCommand(String[]): void
  - handleDisplayStationCommand(String[]): void
  - handleDisplayUserCommand(String[]): void
  - handleRunTestCommand(String[]): void
  - handleAddUserCommand(String[]): void
  - handleOnlineCommand(String[]): void
  - handleDisplayHelp(String[]): void
  - handleNetworkCommand(String[]): void
  + executeCommandsFromFile(String): void
  - handleSetupCommand(Object[]): void
  - handleReturnBikeCommand(String[]): void
  - handleRentBikeCommand(String[]): void
  - handleOfflineCommand(String[]): void
}
class MyVelibFunctions {
  + MyVelibFunctions(): 
  + displayVelib(String): void
  + returnbike(int, int, int, String): void
  + displayUser(String, int): void
  + displayNetworks(): void
  + online(String, int): void
  + runtTest(String): void
  + setup(String, Integer, Integer, Double, Integer): void
  + rentbikeGPS(int, double, double, String, String): void
  + returnbikeGPS(int, double, double, int, String): void
  + displayAllBikes(String): void
  + offline(String, int): void
  + displayStation(String, Integer): void
  + addUser(String, String, String): void
  + rentbike(int, int, String, String): void
  + sortStation(String, String): void
   randomBicycleType: BicycleType
}
class MyVelibIndex {
  + MyVelibIndex(): 
  - processUserData(BufferedReader): void
  + main(String[]): void
  - InitialConfiguration(): void
  - RunCommand(): void
  - processStationData(BufferedReader): void
}
class NoRegistrationCard {
  + NoRegistrationCard(): 
  + toString(): String
}
class NormalRide {
  + NormalRide(GPSPosition, GPSPosition): 
  # startPosition: GPSPosition
  # endPosition: GPSPosition
  + findEndStation(ArrayList<DockingStation>): DockingStation
  + findStartStation(ArrayList<DockingStation>): DockingStation
   endPosition: GPSPosition
   startPosition: GPSPosition
}
class NormalRideTest {
  + NormalRideTest(): 
  + testGettingStartStation(): void
}
class ParkingSlot {
  + ParkingSlot(DockingStation): 
  + ParkingSlot(DockingStation, Bicycle): 
  # id: Integer
  - bike: Bicycle
  + toString(): String
   parkingSlotStatus: ParkingSlotStatus
   id: Integer
   bike: Bicycle
   stationId: DockingStation
   nextUniqueId: Integer
}
enum ParkingSlotStatus << enumeration >> {
  + ParkingSlotStatus(): 
  + values(): ParkingSlotStatus[]
  + valueOf(String): ParkingSlotStatus
}
class ParkingSlotTest {
  + ParkingSlotTest(): 
  + testUniqueID(): void
  + testStatusParkingSlot(): void
  + testBicycleParkingSlot(): void
}
class RegistrationCard {
  + RegistrationCard(boolean, int, int, int, int): 
  - firstHourElec: int
  - timeCreditBalance: double
  - nextHourMechanical: int
  - firstHourMechanical: int
  - nextHourElec: int
  + getNexttHourCost(double, BicycleType): double
  + giveRideCost(double, BicycleType): double
  + getFirstHourCost(BicycleType): double
  + canHandleTimeCredit(): boolean
   firstHourElec: int
   nextHourMechanical: int
   timeCreditBalance: double
   nextHourElec: int
   firstHourMechanical: int
}
class RideAvoidingPlusStations {
  + RideAvoidingPlusStations(GPSPosition, GPSPosition): 
  + findEndStation(ArrayList<DockingStation>): DockingStation
}
class RideAvoindingPlusStationTest {
  + RideAvoindingPlusStationTest(): 
  + testFindEndStation(): void
}
class RidePreferPlusStation {
  + RidePreferPlusStation(GPSPosition, GPSPosition): 
  + findEndStation(ArrayList<DockingStation>): DockingStation
}
class RidePreferPlusStationTest {
  + RidePreferPlusStationTest(): 
  + testFindEndStation(): void
}
class RidePreferStreetBike {
  + RidePreferStreetBike(GPSPosition, GPSPosition): 
  + findStartBike(ArrayList<Bicycle>): Bicycle
}
class RidePreferStreetStationTest {
  + RidePreferStreetStationTest(): 
  + testFindEndStation(): void
}
class RidePreserveUniformityBikes {
  + RidePreserveUniformityBikes(GPSPosition, GPSPosition): 
  + findStartStation(ArrayList<DockingStation>, BicycleType): DockingStation
  + findEndStation(ArrayList<DockingStation>): DockingStation
}
enum TypeOfEvent << enumeration >> {
  + TypeOfEvent(): 
  + valueOf(String): TypeOfEvent
  + values(): TypeOfEvent[]
}
class User {
  + User(String, GPSPosition, String, RegistrationCard, String): 
  + User(String, GPSPosition, String, String): 
  # bike: Bicycle
  # timeCredit: double
  # registrationCard: RegistrationCard
  # timeSpent: int
  # position: GPSPosition
  # numberOfRides: int
  # totalCharges: double
  # name: String
  # creditCardNumber: String
  # rentTotalTime: int
  # id: int
  # rentDateTime: LocalDateTime
  + returnBike(ParkingSlot, LocalDateTime, DockingStation): void
  + addUserToList(User): void
  + rentBikeOutOfStation(Bicycle, LocalDateTime): void
  + giveCost(BicycleType, LocalDateTime, LocalDateTime, Bicycle): double
  + hasABike(): boolean
  + returnBikeOutOfStation(GPSPosition, LocalDateTime): void
  + addCharge(double): void
  + toString(): String
  - generateUniqueId(String): int
  + giveCostMalus(BicycleType, LocalDateTime, LocalDateTime): double
  + rentBikeUser(ParkingSlot, LocalDateTime): void
   timeCredit: double
   numberOfRides: int
   totalCharges: double
   rentDateTime: LocalDateTime
   rentTotalTime: int
   name: String
   bike: Bicycle
   position: GPSPosition
   timeCreditBalance: double
   creditCardNumber: String
   id: int
   timeSpent: int
   registrationCard: RegistrationCard
}
class UserTest {
  + UserTest(): 
  + testRideCostLong(): void
  + tesAddingCharges(): void
  + testRideCostWithCards(): void
  + testUniqueID(): void
  + testPositionUser(): void
  + testRideCost(): void
}
class VLibreCard {
  + VLibreCard(): 
  + toString(): String
}
class VMaxCard {
  + VMaxCard(): 
  + toString(): String
}
class VelibNetwork {
  + VelibNetwork(String): 
  + getStation(int): DockingStation
  + toString(): String
   stations: ArrayList<DockingStation>
   stationToMyVelibNetwork: DockingStation
   nameVelibNetwork: String
   users: ArrayList<User>
   userToMyVelibNetwork: User
}
class VelibNetworkTest {
  + VelibNetworkTest(): 
  + testAddStation(): void
  + tesAddUser(): void
}
class mainTest {
  + mainTest(): 
  + main(String[]): void
}

NoRegistrationCard            -[#000082,plain]-^  RegistrationCard             
RideAvoidingPlusStations      -[#000082,plain]-^  NormalRide                   
RidePreferPlusStation         -[#000082,plain]-^  NormalRide                   
RidePreferStreetBike          -[#000082,plain]-^  NormalRide                   
RidePreserveUniformityBikes   -[#000082,plain]-^  NormalRide                   
VLibreCard                    -[#000082,plain]-^  RegistrationCard             
VMaxCard                      -[#000082,plain]-^  RegistrationCard             
@enduml
